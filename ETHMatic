// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import {console} from "forge-std/console.sol";

interface IERC20Extented is IERC20 {
    function decimals() external view returns (uint8);
}

contract AnkrStaking is ReentrancyGuard, Ownable {
    ICertificateToken public immutable underlyingToken; //aankrProxy Token // Mainnet 0x26dcFbFa8Bc267b250432c01C982Eaf81cC5480C
    IERC20Extented public immutable rewardsToken;
    IStakingContract public immutable StakingContract; // Mainnet  0xCfD4B4Bc15C8bF0Fd820B0D4558c725727B3ce89
    address public WMATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;
    address public _bontToken = 0x99534Ef705Df1FFf4e4bD7bbaAF9b0dFf038EbFe;
    uint256 public constant minimumCooldown = 2 days;
    uint256 public minimumUnstake;

    using SafeERC20 for IERC20Extented;

    address _treasuryWallet;
    uint256 public updatedAt;
    // Reward to be paid out per second
    uint256 public rewardRate;
    uint256 public rewardPerTokenStored;
    uint256 public constant FEE_MAX = 100000;
    uint256 public depositFee;
    uint256 public minimumStake;
    uint256 public feeCollected;
    // Referral reward arr for users
    uint256[4] refRew = [5, 2, 2, 1];
    uint256 fee = 30;
    uint256 public lastUpdateTime;
    uint256 public totalUnderlyingToken;
    uint256 public underlyingTokenFee;
    uint256 private _cooldownTime;

    struct user_data {
        address referralAddress;
        uint256 userRewardPerTokenPaid;
        uint256 rewards;
        uint256 balance;
        uint256 underlyingBalance;
        uint256 lastUpdated;
    }

    struct reward_data {
        uint256 available;
        uint256 claimed;
    }

    // Withdrawal Requests
    struct request_data {
        uint256 amount;
        uint256 fee;
        uint256 cooldownTime;
    }

    mapping(address => reward_data) public rewards;
    mapping(address => user_data) public user;
    mapping(address => request_data) public requests;
    // User address => rewardPerTokenStored
    // User address => rewards to be claimed
    // User address => staked amount
    // Underlying token abnb

    constructor(
        address _underlyingToken,
        address _rewardToken,
        address _stakingContract,
        address treasuryWallet,
        uint256 _rewardRate
    ) {
        rewardRate = _rewardRate;
        rewardsToken = IERC20Extented(_rewardToken);
        lastUpdateTime = block.timestamp;

        require(rewardsToken.decimals() == 18, "Reward token only supports 18 decimal");

        underlyingToken = ICertificateToken(_underlyingToken);
        StakingContract = IStakingContract(_stakingContract);
        _treasuryWallet = treasuryWallet;
    }

    modifier updateReward(address account) {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = block.timestamp;
        if (account != address(0)) {
            user[account].rewards = earned(account);
            user[account].userRewardPerTokenPaid = rewardPerTokenStored;
        }

        _;
    }

    event ReferRewardsClaimed(address indexed claimer, uint256 amount);
    event ReferRewarded(address indexed referrer, address referee, uint256 _amount);
    event Unstaked(
        address indexed ownerAddress,
        address indexed receiverAddress,
        uint256 amount,
        uint256 shares,
        bool indexed isRebasing
    );
    event FeeAmount(uint256 _fee);

    event UnstakeClaimed(address indexed receiver, uint256 _amount);

    /**
     * @dev Get the current timestamp for calculating the last applicable reward time.
     * @return The current block timestamp.
     */

    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp;
    }
    /**
     * @dev Get the current reward rate per token.
     * @return The current reward rate.
     */

    function rewardPerToken() public view returns (uint256) {
        if (totalUnderlyingToken == 0) {
            return rewardPerTokenStored;
        }
        return rewardPerTokenStored
            + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate * 1e18)) / (totalUnderlyingToken));
    }
    /**
     * @dev Change the reward rate per token.
     * Only the contract owner can execute this function.
     * @param _rewardRate The new reward rate to set.
     */

    function setRewardPerToken(uint256 _rewardRate) external onlyOwner updateReward(address(0)) {
        require(rewardRate > 0 ,"Reward rate must be greater than 0");

        rewardRate = _rewardRate;
    }
    /**
     * @dev Stake WMATIC tokens to earn rewards and certificates.
     * @param _amount The amount of WMATIC tokens to stake.
     * @param _referrer The address of the referrer who referred the user (optional).
     */

    function stake(uint256 _amount, address _referrer)
        external
        payable
        nonReentrant
        updateReward(msg.sender)
        returns (uint256)
    {
        require(_referrer != msg.sender && _referrer != address(0), "Cannot use same address");
        require(_amount % 1 ether == 0, "Value must be a whole number");

        require(_amount >= getMinStake(), "Value must be  greater than minimum stake value");
        IERC20Extented(WMATIC).safeTransferFrom(msg.sender, address(this), _amount);
        IERC20Extented(WMATIC).safeApprove(address(StakingContract), _amount);
        user[msg.sender].balance += _amount;
        if (user[msg.sender].referralAddress == address(0)) {
            user[msg.sender].referralAddress = _referrer;
        }
        uint256 unAmount = getRatioConversion(_amount);

        uint256 feeCharged = ((unAmount * depositFee) / FEE_MAX);
        console.log(feeCharged);
        unAmount -= feeCharged;
        underlyingTokenFee += feeCharged;

        totalUnderlyingToken += unAmount;
        user[msg.sender].underlyingBalance += unAmount;
        StakingContract.stakeAndClaimCerts(_amount);
        return unAmount;
    }

    function withdraw() external payable updateReward(msg.sender) nonReentrant {
        require(user[msg.sender].balance > 0, "No Deposits made");
        uint256 _ethUnstakeFee = getEthUnstakeFee();
        require(msg.value == _ethUnstakeFee, "Invalid amount sent");
        uint256 underlyingAmount = user[msg.sender].underlyingBalance;
        require(underlyingAmount >= minimumUnstake, "Invalid amount Called");

        requests[msg.sender].cooldownTime = block.timestamp + _cooldownTime;
        uint256 balance = user[msg.sender].balance;

        user[msg.sender].balance -= balance;
        user[msg.sender].underlyingBalance -= underlyingAmount;
        underlyingAmount -= 1;
        IERC20Extented(underlyingToken).safeApprove(address(StakingContract), underlyingAmount);
        totalUnderlyingToken -= underlyingAmount;
        uint256 currentAmount = ICertificateToken(_bontToken).sharesToBalance(underlyingAmount);
        requests[msg.sender].amount += currentAmount;
        _checkReferReward(balance, currentAmount);
        StakingContract.unstakeCerts{value: msg.value}(underlyingAmount, 0, 0, "0x0");
    }

    function getEthUnstakeFee() public view returns (uint256) {
        uint256 _ethUnstakeFee = StakingContract.ethUnstakeFee();
        return _ethUnstakeFee;
    }
    /**
     * @dev Withdraw staked funds and update rewards for the sender.
     */

    function _checkReferReward(uint256 _prevAmount, uint256 _unAmount) private {
        if (_unAmount > _prevAmount) {
            uint256 rewA = _unAmount - _prevAmount;
            uint256 _unstakeFee = (rewA * fee) / 100;
            requests[msg.sender].fee += _unstakeFee;
     
        }
    }

    /**
     * @dev Distribute referral rewards to referrers.
     * @param _amount The total amount of rewards to be distributed.
     */
    function _payRefs(uint256 _amount) private {
        address referrer = user[msg.sender].referralAddress;
        uint256  feeTransferred;
         for (uint256 i = 0; i < 4; i++) {
            if (referrer != address(0)) {
                uint256 rew = (_amount * refRew[i]) / 100;
                rewards[referrer].available += rew;
                feeTransferred+= rew;
                emit ReferRewarded(referrer, msg.sender, rew);
                referrer = user[referrer].referralAddress;
            } else {
                break;
            }
        }
        feeCollected+= (_amount - feeTransferred);
    }
    /**
     * @dev Claim and transfer available referral rewards to the sender.
     * Emits the `ReferRewardsClaimed` event upon successful claim.
     */

    function claimReferRewards() external  nonReentrant{
        uint256 rew = rewards[msg.sender].available;
        require(rew != 0, "No rewards available");
        require(rewardsToken.balanceOf(address(this)) >= rew, "Wait for rewards to be available");
        rewards[msg.sender].available = 0;
        IERC20Extented(WMATIC).safeTransfer(msg.sender, rew);
        rewards[msg.sender].claimed += rew;
        emit ReferRewardsClaimed(msg.sender, rew);
    }
    /**
     * @dev Calculate the total earned rewards for a specific account.
     * @param _account The account for which to calculate the earned rewards.
     * @return The total earned rewards for the account.
     */

    function earned(address _account) public view returns (uint256) {
        uint256 balance = user[_account].underlyingBalance;
        uint256 userRewardPerTokenPaid = user[_account].userRewardPerTokenPaid;
        uint256 _rewards = user[_account].rewards;
        return (balance * (rewardPerToken() - userRewardPerTokenPaid)) / 1e18 + _rewards;
    }

    /**
     * @dev Claim and transfer earned rewards to the sender.
     */
    function getReward() public updateReward(msg.sender) nonReentrant {
        uint256 reward = user[msg.sender].rewards;
        if (reward > 0 && rewardsToken.balanceOf(address(this)) > reward) {
            user[msg.sender].rewards = 0;
            rewardsToken.transfer(msg.sender, reward);
            emit RewardClaimed(msg.sender, address(rewardsToken), reward);
        }
    }

    event RewardClaimed(address indexed userAddress, address indexed tokenAddress, uint256 reward);

    /**
     * @dev Claim and transfer requested unstaked amount to the sender.
     */
    function claimUnstakeAmount() external nonReentrant {
        request_data memory userRq = requests[msg.sender];
        uint256 _amount = userRq.amount;
        uint256 _fee = userRq.fee;
        uint256 _cooldown = userRq.cooldownTime;
        require(_cooldown < block.timestamp, "Wait for cooldown to end");
        require(_amount > 0, "No unstaking request made");
        require(isClaimAvailable(msg.sender), "No claim available");
        uint256 totalAmount = _amount - _fee;
        emit FeeAmount(_fee);
        emit UnstakeClaimed(msg.sender, _amount);
        requests[msg.sender].fee = 0;
        requests[msg.sender].amount = 0;
        _payRefs(_fee);
        IERC20Extented(WMATIC).safeTransfer(msg.sender, totalAmount);
    }
    /**
     * @dev Check if the claimed amount is available for withdrawal.
     * @param _user The address of the user to check for claim availability.
     * @return A boolean indicating whether the claimed amount is available for withdrawal.
     */

    function isClaimAvailable(address _user) public view returns (bool) {
        if (address(this).balance >= requests[_user].amount && requests[_user].cooldownTime <= block.timestamp) {
            return true;
        } else {
            return false;
        }
    }

    
    /**
     * @dev Update the treasury wallet address.
     * Only the contract owner can update the treasury address.
     * @param _receiverAddress The new treasury wallet address.
     */
    function setTreasuryAddress(address _receiverAddress) external onlyOwner {
        require(_receiverAddress != address(0), "Treasury address CANNOT be DEAD WALLET");

        _treasuryWallet = _receiverAddress;
    }
    /**
     * @dev Fallback function to receive incoming Ether.
     */

    function getMinStake() public view returns (uint256) {
        uint256 _amount = StakingContract.getMinimumStake();
        return _amount;
    }

    function setCooldownTime(uint256 _time) external onlyOwner {
        require(_time * 1 days >= minimumCooldown, "Invalid cooldown time");
        _cooldownTime = (_time * 1 days);
    }

    function getCooldownTime() public view returns (uint256) {
        return _cooldownTime;
    }

    function getRatioConversion(uint256 _amount) public view returns (uint256) {
        uint256 _ratio = safeCeilMultiplyAndDivide(_amount, underlyingToken.ratio(), 1e18);
        return _ratio;
    }

    function safeCeilMultiplyAndDivide(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {
        uint256 remainder = a % c;
        uint256 result = a / c;
        bool safe;
        (safe, result) = tryMul(result, b);
        if (!safe) {
            return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
        }
        (safe, result) = tryAdd(result, ((remainder * b) + (c - 1)) / c);
        if (!safe) {
            return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
        }
        return result;
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    receive() external payable {}
    /**
     * @dev Withdraw collected fees to the treasury wallet.
     * Only the contract owner can execute this function.
     * Requires collected fees to be greater than zero.
     */

    function withdrawFee() external onlyOwner {
        require(feeCollected > 0, "No fee collected yet!");
        uint256 _fee = feeCollected;
        feeCollected = 0;
        IERC20Extented(WMATIC).safeTransfer(_treasuryWallet, _fee);
    }

    function withdrawStakeFee() external onlyOwner {
        require(underlyingTokenFee > 0, "No token collected yet!");
        uint256 _fee = underlyingTokenFee;
        underlyingTokenFee = 0;
        IERC20Extented(underlyingToken).safeTransfer(_treasuryWallet, _fee);
    }

    function setDepositFee(uint256 _fee) external onlyOwner {
        require(_fee/FEE_MAX <= 30,"Invalid Fee");

        depositFee = _fee;
    }
    
  function setMinimumUnStake(uint256 _amount) external onlyOwner {
        require(_amount > 0 ether && _amount <= 10 ether,"Amount should be less than 0.1");
        
        minimumUnstake = _amount;
    }

}

interface IStakingContract {
    function ethUnstakeFee() external view returns (uint256);
    function getMinimumStake() external view returns (uint256);
    function stakeAndClaimCerts(uint256 amount) external;
    function unstakeCerts(uint256 shares, uint256 fee, uint256 useBeforeBlock, bytes calldata signature)
        external
        payable;
    function swap(uint256 amount, address receiverAddress) external;
}

interface ICertificateToken is IERC20Extented {
    function sharesToBalance(uint256 amount) external view returns (uint256);
    function ratio() external view returns (uint256);
}

