// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "@openzeppelin/contracts/access/Ownable.sol";

contract AnkrStaking is ReentrancyGuard, Ownable {
    ICertificateToken public underlyingToken; //aankrProxy Token // Mainnet 0xc3344870d52688874b06d844E0C36cc39FC727F6
    IERC20 public rewardsToken;
    uint256 public minimumUnstake;
    uint256 public minimumStake;
    IStakingContract public StakingContract; // Mainnet  0x7baa1e3bfe49db8361680785182b80bb420a836d
    IOracle public Oracle = IOracle(0x52cbE0f49CcdD4Dc6E9C13BAb024EABD2842045B);
    address public WBNB;
    address public _bondToken;

    using SafeERC20 for IERC20;

    address _treasuryWallet;
    uint256 public updatedAt;
    // Reward to be paid out per second
    uint256 public rewardRate;
    uint256 public rewardPerTokenStored;
    uint256 public constant FEE_MAX = 100000;
    uint256 public depositFee;
    uint256 public feeCollected;
    // Referral reward arr for users
    uint256[4] refRew = [5, 2, 2, 1];
    uint256 fee = 30;
    uint256 public lastUpdateTime;
    uint256 public totalUnderlyingToken;
    uint256 private underlyingTokenFee;
    uint256 private _cooldownTime;

    struct user_data {
        address referralAddress;
        uint256 userRewardPerTokenPaid;
        uint256 rewards;
        uint256 balance;
        uint256 underlyingBalance;
        uint256 lastUpdated;
    }

    struct reward_data {
        uint256 available;
        uint256 claimed;
    }

    // Withdrawal Requests
    struct request_data {
        uint256 amount;
        uint256 fee;
        uint256 cooldownTime;
    }

    mapping(address => reward_data) public rewards;
    mapping(address => user_data) public user;
    mapping(address => request_data) public requests;

    constructor(
        address _underlyingToken,
        address _bondedToken,
        address _rewardToken,
        address _stakingContract,
        address treasuryWallet,
        uint256 _rewardRate,
        uint256 _minimumUn,
        uint256 _minimumStake,
        uint256 _depositFee,
        address _wbnb
    ) {
        rewardRate = _rewardRate;
        rewardsToken = IERC20(_rewardToken);
        underlyingToken = ICertificateToken(_underlyingToken);
        StakingContract = IStakingContract(_stakingContract);
        _treasuryWallet = treasuryWallet;
        minimumUnstake = _minimumUn;
        minimumStake = _minimumStake;
        depositFee = _depositFee;
        _bondToken = _bondedToken;
        WBNB = _wbnb;
    }

    modifier updateReward(address account) {
        lastUpdateTime = block.timestamp;
        rewardPerTokenStored = rewardPerToken();
        if (account != address(0)) {
            user[account].rewards = earned(account);
            user[account].userRewardPerTokenPaid = rewardPerTokenStored;
        }

        _;
    }

    event ReferRewardsClaimed(address indexed claimer, uint256 amount);
    event ReferRewarded(address indexed referrer, address referee, uint256 _amount);
    event Recovered(address token, uint256 amount);
    event Unstaked(
        address indexed ownerAddress,
        address indexed receiverAddress,
        uint256 amount,
        uint256 shares,
        bool indexed isRebasing
    );
    event FeeAmount(uint256 _fee);

    event UnstakeClaimed(address indexed receiver, uint256 _amount);

    /**
     * @dev Get the current timestamp for calculating the last applicable reward time.
     */
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp;
    }

    // /**
    //  * @dev Get the current reward per token.
    //  */
    // function rewardPerToken() public view returns (uint) {
    //     return rewardRate;
    // }
    //Changed

    function rewardPerToken() public view returns (uint256) {
        if (totalUnderlyingToken == 0) {
            return rewardPerTokenStored;
        }
        return rewardPerTokenStored
            + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate * 1e18)) / (totalUnderlyingToken));
    }
    /**
     * @dev Change the reward rate per token.
     * @param _rewardRate The new reward rate to set.
     */

    function setRewardPerToken(uint256 _rewardRate) external onlyOwner updateReward(address(0)) {
        rewardRate = _rewardRate;
    }

    /**
     * @dev Stake a certain amount of ETH into the Staking Contract.
     * @param _referrer The address of the referrer who referred the user.
     */
    function stake(address _referrer) external payable nonReentrant updateReward(msg.sender) {
        require(msg.value >= minimumStake, "Value must be 1 ether or greater");

        require(_referrer != msg.sender && _referrer != address(0), "Cannot use same address");

        require(msg.value % 1 ether == 0, "Value must be a whole number");

        uint256 _amount = msg.value;
        require(_amount > 0, "amount = 0");
        user[msg.sender].balance += _amount;
        if (user[msg.sender].referralAddress == address(0)) {
            user[msg.sender].referralAddress = _referrer;
        }
        uint256 unAmount = getRatio();
        unAmount = (unAmount * msg.value) / 1e18;
        uint256 feeCharged = ((unAmount * depositFee) / FEE_MAX);
        unAmount -= feeCharged;
        underlyingTokenFee += feeCharged;
        totalUnderlyingToken += unAmount;
        user[msg.sender].underlyingBalance += unAmount;
        StakingContract.stakeAndClaimCerts{value: _amount}();
    }

    /**
     * @dev Withdraw staked funds and claim corresponding certificates.
     */
    function withdraw() external updateReward(msg.sender) nonReentrant {
        uint256 underlyingAmount = user[msg.sender].underlyingBalance;
        require(underlyingAmount >= minimumUnstake, "Invalid amount Called");
        uint256 currentAmount = ICertificateToken(_bondToken).sharesToBalance(underlyingAmount);

        requests[msg.sender].amount += currentAmount;
        requests[msg.sender].cooldownTime = block.timestamp + _cooldownTime;
        uint256 balance = user[msg.sender].balance;

        user[msg.sender].balance -= balance;
        user[msg.sender].underlyingBalance -= underlyingAmount;
        totalUnderlyingToken -= underlyingAmount;
        _checkReferReward(balance, currentAmount);

        underlyingAmount -= 1;
        StakingContract.claimCerts(underlyingAmount);
    }

    /**
     * @dev Check and distribute referral rewards if the underlying amount exceeds the previous amount.
     * @param _prevAmount The previous amount of underlying tokens.
     * @param _unAmount The current amount of underlying tokens.
     */

    function _checkReferReward(uint256 _prevAmount, uint256 _unAmount) private {
        if (_unAmount > _prevAmount) {
            uint256 rewA = _unAmount - _prevAmount;
            uint256 _unstakeFee = (rewA * fee) / 100;
            feeCollected += _unstakeFee;
            requests[msg.sender].fee += _unstakeFee;
            _unAmount = avxToRWT(rewA);
            _payRefs(_unAmount);
        }
    }

    /**
     * @dev Distribute referral rewards to up to 4 levels of referrers.
     * @param _amount The total reward amount to distribute.
     */
    function _payRefs(uint256 _amount) private {
        address referrer = user[msg.sender].referralAddress;
        for (uint256 i = 0; i < 4; i++) {
            if (referrer != address(0)) {
                uint256 rew = (_amount * refRew[i]) / 100;
                rewards[referrer].available += rew;
                emit ReferRewarded(referrer, msg.sender, rew);
                referrer = user[referrer].referralAddress;
            } else {
                break;
            }
        }
    }

    /**
     * @dev Claim available referral rewards.
     */
    function claimReferRewards() external {
        uint256 rew = rewards[msg.sender].available;
        require(rew != 0, "No rewards available");
        require(rewardsToken.balanceOf(address(this)) >= rew, "Wait for rewards to be available");
        rewards[msg.sender].available = 0;
        rewardsToken.safeTransfer(msg.sender, rew);
        rewards[msg.sender].claimed += rew;
        emit ReferRewardsClaimed(msg.sender, rew);
    }

    /**
     * @dev Calculate the total earned rewards for a given account.
     * @param _account The account for which to calculate earned rewards.
     * @return The total earned rewards.
     */
    function earned(address _account) public view returns (uint256) {
        uint256 balance = user[_account].underlyingBalance;
        uint256 userRewardPerTokenPaid = user[_account].userRewardPerTokenPaid;
        uint256 _rewards = user[_account].rewards;
        return (balance * (rewardPerToken() - userRewardPerTokenPaid)) / 1e18 + _rewards;
    }

    /**
     * @dev Claim and transfer pending rewards to the sender.
     */
    function getReward() public updateReward(msg.sender) nonReentrant {
        uint256 reward = user[msg.sender].rewards;
        if (reward > 0 && rewardsToken.balanceOf(address(this)) > reward) {
            user[msg.sender].rewards = 0;
            rewardsToken.transfer(msg.sender, reward);
        }
    }

    /**
     * @dev Withdraw collected unstake fees to the treasury wallet.
     * Only the owner can execute this function.
     */
    function withdrawFee() external onlyOwner {
        require(feeCollected > 0, "No fee collected yet!");
        uint256 _fee = feeCollected;
        feeCollected = 0;
        _unsafeTransfer(_treasuryWallet, _fee, false);
    }

    function withdrawTokenFee() external onlyOwner {
        require(underlyingTokenFee > 0, "No fee collected yet!");
        uint256 _fee = underlyingTokenFee;
        underlyingTokenFee = 0;
        IERC20(underlyingToken).safeTransfer(_treasuryWallet, _fee);
    }

    function _min(uint256 x, uint256 y) private pure returns (uint256) {
        return x <= y ? x : y;
    }

    function _unsafeTransfer(address receiverAddress, uint256 amount, bool limit) internal virtual returns (bool) {
        address payable wallet = payable(receiverAddress);
        bool success;
        if (limit) {
            assembly {
                success := call(27000, wallet, amount, 0, 0, 0, 0)
            }
            return success;
        }
        (success,) = wallet.call{value: amount}("");
        require(success == true, "Send Eth reverted");
        return success;
    }

    /**
     * @dev Claim and transfer unstaked amount to the sender after deducting the fee.
     */
    function claimUnstakeAmount() external nonReentrant {
        request_data memory userRq = requests[msg.sender];
        uint256 _amount = userRq.amount;
        uint256 _fee = userRq.fee;
        uint256 _cooldown = userRq.cooldownTime;
        require(_cooldown < block.timestamp, "Wait for cooldown to end");
        require(_amount > 0, "No unstaking request made");
        require(isClaimAvailable(msg.sender), "No claim available");
        uint256 totalAmount = _amount - _fee;
        emit FeeAmount(_fee);
        emit UnstakeClaimed(msg.sender, _amount);
        requests[msg.sender].fee = 0;
        requests[msg.sender].amount = 0;
        _unsafeTransfer(msg.sender, totalAmount, true);
    }

    /**
     * @dev Check if a user is eligible to claim their unstaked amount.
     * @param _user The user's address to check.
     * @return Whether the user can claim their unstaked amount.
     */
    function isClaimAvailable(address _user) public view returns (bool) {
        if (
            (address(this).balance - feeCollected) >= requests[_user].amount
                && requests[_user].cooldownTime <= block.timestamp
        ) {
            return true;
        } else {
            return false;
        }
    }

    //Convert Avalanche price to Reward Tokens
    function avxToRWT(uint256 _amount) public view returns (uint256) {
        uint256 _avaxtoRWT = Oracle.getRate(WBNB, rewardsToken, false);
        uint256 _cafAmount = (_amount * _avaxtoRWT) / 1e18;
        return _cafAmount;
    }
    /**
     * @dev Update the treasury address.
     * Only the contract owner can execute this function.
     * @param _receiverAddress The new treasury address to set.
     */

    function setTreasuryAddress(address _receiverAddress) external onlyOwner {
        require(_receiverAddress != address(0), "Treasury address CANNOT be DEAD WALLET");

        _treasuryWallet = _receiverAddress;
    }

    function setMinimumStake(uint256 _amount) external onlyOwner {
        minimumUnstake = _amount;
    }

    function setDepositFee(uint256 _amount) external onlyOwner {
        depositFee = _amount;
    }

    function setCooldownTime(uint256 _time) external onlyOwner {
        _cooldownTime = (_time * 1 days);
    }

    function getCooldownTime() public view returns (uint256) {
        return _cooldownTime;
    }

    function getRatio() public view returns (uint256 ratio) {
        ratio = underlyingToken.ratio();
        return ratio;
    }

    function getUnderlyingTokenFee() public view returns (uint256) {
        return underlyingTokenFee;
    }

    receive() external payable {}
}

interface IStakingContract {
    function stakeAndClaimCerts() external payable;

    function claimCerts(uint256 shares) external;

    function swap(uint256 amount, address receiverAddress) external;
}

interface ICertificateToken is IERC20 {
    function sharesToBalance(uint256 amount) external view returns (uint256);

    function ratio() external view returns (uint256);
}

interface IOracle {
    function getRate(address srcToken, IERC20 dstToken, bool useWrappers)
        external
        view
        returns (uint256 weightedRate);
}
