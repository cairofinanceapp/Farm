// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AnkrStaking is ReentrancyGuard, Ownable {
    ICertificateToken public underlyingToken; //aankrProxy Token // Mainnet 0x0E9b89007eEE9c958c0EDA24eF70723C2C93dD58
    IERC20 public rewardsToken;
    ISwapPool public SwapPoolContract; // Mainnet  0x62A509BA95c75Cabc7190469025E5aBeE4eDdb2a
    IOracle public Oracle = IOracle(0x52cbE0f49CcdD4Dc6E9C13BAb024EABD2842045B);
    address public WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;

    using SafeERC20 for IERC20;

    uint24 public constant FEE_MAX = 100000;
    uint256 public integratorFeeCollected;
    address _treasuryWallet;
    uint256 public updatedAt;
    // Reward to be paid out per second
    uint256 public rewardRate;
    uint256 public rewardPerTokenStored;
    uint256 _unstakeFeeCollected;
    // Referral reward arr for users
    uint256[4] refRew = [5, 2, 2, 1];
    uint256 fee = 30;
    uint256 public lastUpdateTime;
    uint256 public totalUnderlyingToken;
    uint256 private underlyingTokenFee;
    uint256 public depositFee;

    struct user_data {
        address referralAddress;
        uint256 userRewardPerTokenPaid;
        uint256 rewards;
        uint256 balance;
        uint256 underlyingBalance;
        uint256 lastUpdated;
    }

    struct reward_data {
        uint256 available;
        uint256 claimed;
    }

    // Withdrawal Requests
    struct request_data {
        uint256 amount;
        uint256 fee;
    }

    mapping(address => reward_data) public rewards;
    mapping(address => user_data) public user;
    mapping(address => request_data) public requests;

    // User address => rewardPerTokenStored
    // User address => rewards to be claimed
    // User address => staked amount
    // Underlying token abnb

    constructor(
        address _underlyingToken,
        address _rewardToken,
        address _swapPoolContract,
        address treasuryWallet,
        uint256 _rewardRate
    ) {
        rewardRate = _rewardRate;
        rewardsToken = IERC20(_rewardToken);
        underlyingToken = ICertificateToken(_underlyingToken);
        SwapPoolContract = ISwapPool(_swapPoolContract);
        _treasuryWallet = treasuryWallet;
    }

    modifier updateReward(address account) {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = block.timestamp;
        if (account != address(0)) {
            user[account].rewards = earned(account);
            user[account].userRewardPerTokenPaid = rewardPerTokenStored;
        }

        _;
    }

    event ReferRewardsClaimed(address indexed claimer, uint256 amount);
    event ReferRewarded(address indexed referrer, address referee, uint256 _amount);
    event Recovered(address token, uint256 amount);
    event Unstaked(
        address indexed ownerAddress,
        address indexed receiverAddress,
        uint256 amount,
        uint256 shares,
        bool indexed isRebasing
    );
    event FeeAmount(uint256 _fee);

    event UnstakeClaimed(address indexed receiver, uint256 _amount);

    /**
     * @dev Get the current timestamp for calculating the last applicable reward time.
     * @return The current block timestamp.
     */
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp;
    }

    /**
     * @dev Get the current reward rate per token.
     * @return The current reward rate.
     */
    function rewardPerToken() public view returns (uint256) {
        if (totalUnderlyingToken == 0) {
            return rewardPerTokenStored;
        }
        return rewardPerTokenStored
            + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate * 1e18)) / (totalUnderlyingToken));
    }
    /**
     * @dev Change the reward rate per token.
     * Only the contract owner can execute this function.
     * @param _rewardRate The new reward rate to set.
     */

    function setRewardPerToken(uint256 _rewardRate) external onlyOwner updateReward(address(0)) {
        rewardRate = _rewardRate;
    }

    /**
     * @dev Stake Ether into the contract and update user balances.
     * @param _referrer The referral address of the user.
     */
    function stake(address _referrer) external payable nonReentrant updateReward(msg.sender) {
        require(msg.value >= 1 ether, "Value must be 1 ether or greater");
        require(_referrer != msg.sender && _referrer != address(0), "Cannot use same address");
        require(msg.value % 1 ether == 0, "Value must be a whole number");
        uint256 _amount = msg.value;
        require(_amount > 0, "amount = 0");
        (, bool isAvailable) = SwapPoolContract.getAmountOut(true, _amount, false);
        require(isAvailable == true, "Liquidity pool is empty");
        user[msg.sender].balance += _amount;
        if (user[msg.sender].referralAddress == address(0)) {
            user[msg.sender].referralAddress = _referrer;
        }
        uint256 unAmount = SwapPoolContract.swapEth{value: _amount}(true, _amount, address(this));
        uint256 integratorFeeAmt;
        if (SwapPoolContract.integratorLockEnabled() == true) {
            integratorFeeAmt = (_amount * SwapPoolContract.integratorFee()) / FEE_MAX;
            if (integratorFeeAmt > 0) {
                integratorFeeCollected += integratorFeeAmt;
            }
        }
        uint256 feeCharged = ((unAmount * depositFee) / FEE_MAX);
        unAmount -= feeCharged;
        underlyingTokenFee += feeCharged;
        totalUnderlyingToken += unAmount;
        user[msg.sender].underlyingBalance += unAmount;
    }

    /**
     * @dev Withdraw staked tokens from the contract and update user balances.
     */
    function withdraw() external updateReward(msg.sender) nonReentrant {
        uint256 underlyingAmount = user[msg.sender].underlyingBalance;

        uint256 balance = user[msg.sender].balance;

        user[msg.sender].balance -= balance;
        user[msg.sender].underlyingBalance -= underlyingAmount;
        totalUnderlyingToken -= underlyingAmount;

        IERC20(underlyingToken).safeApprove(address(SwapPoolContract), underlyingAmount);
        uint256 newAmount = SwapPoolContract.swapEth(false, underlyingAmount, address(this));
        uint256 integratorFeeAmt;
        if (SwapPoolContract.integratorLockEnabled() == true) {
            integratorFeeAmt = (newAmount * SwapPoolContract.integratorFee()) / FEE_MAX;
            if (integratorFeeAmt > 0) {
                integratorFeeCollected += integratorFeeAmt;
            }
        }
        uint256 _fee = _checkReferReward(balance, newAmount);
        _unsafeTransfer(msg.sender, newAmount - _fee, true);
    }

    /**
     * @dev Check and update referral rewards based on the difference between new and previous balances.
     * @param _prevAmount The previous balance amount.
     *
     * @return The updated fee amount.
     */
    function _checkReferReward(uint256 _prevAmount, uint256 currentAmount) private returns (uint256) {
        uint256 _feeAmt;

        if (currentAmount > _prevAmount) {
            uint256 rewA = currentAmount - _prevAmount;
            _feeAmt += (rewA * fee) / 100;

            _unstakeFeeCollected += _feeAmt;
            currentAmount = MatictoRWT(rewA);
            _payRefs(currentAmount);
        }
        return _feeAmt;
    }

    /**
     * @dev Distribute referral rewards to referrers based on the provided amount.
     * @param _amount The amount of rewards to distribute.
     */
    function _payRefs(uint256 _amount) private {
        address referrer = user[msg.sender].referralAddress;
        for (uint256 i = 0; i < 4; i++) {
            if (referrer != address(0)) {
                uint256 rew = (_amount * refRew[i]) / 100;
                rewards[referrer].available += rew;
                emit ReferRewarded(referrer, msg.sender, rew);
                referrer = user[referrer].referralAddress;
            } else {
                break;
            }
        }
    }

    /**
     * @dev Claim available referral rewards for the calling user.
     */
    function claimReferRewards() external {
        uint256 rew = rewards[msg.sender].available;
        require(rew != 0, "No rewards available");
        require(rewardsToken.balanceOf(address(this)) >= rew, "Wait for rewards to be available");
        rewards[msg.sender].available = 0;
        rewardsToken.safeTransfer(msg.sender, rew);
        rewards[msg.sender].claimed += rew;
        emit ReferRewardsClaimed(msg.sender, rew);
    }

    /**
     * @dev Calculate the total earnings of a specified account, including pending rewards.
     * @param _account The address of the account to calculate earnings for.
     * @return The total earned amount, including staked balance and pending rewards.
     */
    function earned(address _account) public view returns (uint256) {
        uint256 balance = user[_account].underlyingBalance;
        uint256 userRewardPerTokenPaid = user[_account].userRewardPerTokenPaid;
        uint256 _rewards = user[_account].rewards;
        return (balance * (rewardPerToken() - userRewardPerTokenPaid)) / 1e18 + _rewards;
    }

    /**
     * @dev Claim and transfer earned rewards to the calling user.
     */
    function getReward() public updateReward(msg.sender) nonReentrant {
        uint256 reward = user[msg.sender].rewards;
        if (reward > 0 && rewardsToken.balanceOf(address(this)) > reward) {
            user[msg.sender].rewards = 0;
            rewardsToken.transfer(msg.sender, reward);
        }
    }

    function setDepositFee(uint256 value) external onlyOwner {
        depositFee = value;
    }

    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders
    /**
     * @dev Recover ERC20 tokens accidentally sent to the contract.
     * @param tokenAddress The address of the ERC20 token to recover.
     * @param tokenAmount The amount of tokens to recover.
     */
    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
        require(tokenAddress != address(underlyingToken), "Cannot withdraw the staking token");
        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);
        emit Recovered(tokenAddress, tokenAmount);
    }

    /**
     * @dev Safely transfer Ether to the specified receiver address.
     * @param receiverAddress The address to which Ether will be transferred.
     * @param amount The amount of Ether to be transferred.
     * @param limit If true, use assembly call with gas limit; otherwise, use regular call.
     * @return A boolean indicating the success of the transfer.
     */

    function _unsafeTransfer(address receiverAddress, uint256 amount, bool limit) internal virtual returns (bool) {
        address payable wallet = payable(receiverAddress);
        bool success;
        if (limit) {
            assembly {
                success := call(27000, wallet, amount, 0, 0, 0, 0)
            }
            return success;
        }
        (success,) = wallet.call{value: amount}("");
        require(success == true, "Send Eth reverted");
        return success;
    }

    // Convert Matic price to reward token.
    function MatictoRWT(uint256 _amount) public view returns (uint256) {
        uint256 _maticToRWT = Oracle.getRate(WMATIC, rewardsToken, false);
        uint256 _cafAmount = (_amount * _maticToRWT) / 1e18;
        return _cafAmount;
    }

    /**
     * @dev Update the treasury address where collected fees are sent.
     * @param _receiverAddress The new address for the treasury.
     * Requirements:
     * - Only the contract owner can update the treasury address.
     */
    function setTreasuryAddress(address _receiverAddress) external onlyOwner {
        require(_receiverAddress != address(0), "Treasury address CANNOT be DEAD WALLET");
        _treasuryWallet = _receiverAddress;
    }

    /**
     * @dev Withdraw collected unstaking fees to the treasury address.
     * Requirements:
     * - Only the contract owner can withdraw fees.
     * - Fees must be collected before withdrawing.
     */
    function withdrawFee() external onlyOwner {
        require(_unstakeFeeCollected > 0, "No fee collected yet!");
        uint256 _fee = _unstakeFeeCollected;
        _unstakeFeeCollected = 0;
        _unsafeTransfer(_treasuryWallet, _fee, false);
    }

    function withdrawUnderlyingFee() external onlyOwner {
        uint256 _fee = underlyingTokenFee + integratorFeeCollected;
        require(_fee > 0, "No fee collected yet!");
        integratorFeeCollected = 0;
        underlyingTokenFee = 0;
        _unsafeTransfer(_treasuryWallet, _fee, false);
    }

    /**
     * @dev Fallback function to receive Ether.
     */
    receive() external payable {}
}

interface ISwapPool {
    function swapEth(bool nativeToCeros, uint256 amountIn, address receiver)
        external
        payable
        returns (uint256 amountOut);

    function getAmountOut(bool nativeToCeros, uint256 amountIn, bool isExcludedFromFee)
        external
        view
        returns (uint256 amountOut, bool enoughLiquidity);

    function getAmountIn(bool nativeToCeros, uint256 amountOut, bool isExcludedFromFee)
        external
        view
        returns (uint256 amountIn, bool enoughLiquidity);

    function unstakeFee() external view returns (uint24 unstakeFee);

    function stakeFee() external view returns (uint24 stakeFee);

    function FEE_MAX() external view returns (uint24 feeMax);

    function cerosTokenAmount() external view returns (uint256);

    function integratorLockEnabled() external view returns (bool);

    function integratorFee() external view returns (uint256);
}

interface ICertificateToken is IERC20 {
    function sharesToBalance(uint256 amount) external view returns (uint256);

    function ratio() external view returns (uint256);
}

interface IOracle {
    function getRate(address srcToken, IERC20 dstToken, bool useWrappers)
        external
        view
        returns (uint256 weightedRate);
}
