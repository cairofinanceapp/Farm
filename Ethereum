// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

abstract contract IERC20ExtentedExtented is IERC20 {
    function decimals() public view virtual returns (uint8);
}

contract AnkrStaking is ReentrancyGuard, Ownable {
    ICertificateToken public underlyingToken; //aankrProxy Token  // Mainnet 0xE95A203B1a91a908F9B9CE46459d101078c2c3cb //
    IERC20ExtentedExtented public rewardsToken;
    IStakingContract public StakingContract; // Mainnet 0x84db6eE82b7Cf3b47E8F19270abdE5718B936670
    address public WBNB;
    address public _bondToken;
    uint256 public minimumUnstake;

    using SafeERC20 for IERC20ExtentedExtented;

    address _treasuryWallet;
    uint256 public updatedAt;
    // Reward to be paid out per second
    uint256 public rewardRate;
    uint256 public rewardPerTokenStored;
    uint256 public constant FEE_MAX = 100000;
    uint256 public depositFee;
    uint256 public feeCollected;
    uint256 public minimumCooldown;
    // Referral reward arr for users
    uint256[4] refRew = [5, 2, 2, 1];
    uint256 fee = 30;
    uint256 public lastUpdateTime;
    uint256 public totalUnderlyingToken;
    uint256 private _cooldownTime;

    struct user_data {
        address referralAddress;
        uint256 userRewardPerTokenPaid;
        uint256 rewards;
        uint256 balance;
        uint256 underlyingBalance;
        uint256 lastUpdated;
    }

    struct reward_data {
        uint256 available;
        uint256 claimed;
    }

    // Withdrawal Requests
    struct request_data {
        uint256 amount;
        uint256 fee;
        uint256 cooldownTime;
    }

    mapping(address => reward_data) public rewards;
    mapping(address => user_data) public user;
    mapping(address => request_data) public requests;

    // User address => rewardPerTokenStored
    // User address => rewards to be claimed
    // User address => staked amount
    // Underlying token abnb

    constructor(
        address _underlyingToken,
        address _rewardToken,
        address _stakingContract,
        address treasuryWallet,
        uint256 _rewardRate,
        uint256 _depositFee,
        address _wbnb,
        uint256 minimumCooldownTime
    ) {
        rewardRate = _rewardRate;
        rewardsToken = IERC20ExtentedExtented(_rewardToken);
        require(rewardsToken.decimals() == 18, "Reward token only supports 18 decimal");
        lastUpdateTime = block.timestamp;

        underlyingToken = ICertificateToken(_underlyingToken);
        StakingContract = IStakingContract(_stakingContract);
        _treasuryWallet = treasuryWallet;
        depositFee = _depositFee;
        WBNB = _wbnb;
        minimumCooldown = minimumCooldownTime * 1 days;
    }

    modifier updateReward(address account) {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = block.timestamp;
        if (account != address(0)) {
            user[account].rewards = earned(account);
            user[account].userRewardPerTokenPaid = rewardPerTokenStored;
        }

        _;
    }

    event ReferRewardsClaimed(address indexed claimer, uint256 amount);
    event ReferRewarded(address indexed referrer, address referee, uint256 _amount);
    event Recovered(address token, uint256 amount);
    event Unstaked(
        address indexed ownerAddress,
        address indexed receiverAddress,
        uint256 amount,
        uint256 shares,
        bool indexed isRebasing
    );
    event FeeAmount(uint256 _fee);

    event UnstakeClaimed(address indexed receiver, uint256 _amount);

    /**
     * @dev Get the current timestamp for calculating the last applicable reward time.
     * @return The current block timestamp.
     */
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp;
    }

    /**
     * @dev Get the current reward rate per token.
     * @return The current reward rate.
     */
    function rewardPerToken() public view returns (uint256) {
        if (totalUnderlyingToken == 0) {
            return rewardPerTokenStored;
        }
        return rewardPerTokenStored
            + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate * 1e18)) / (totalUnderlyingToken));
    }
    /**
     * @dev Change the reward rate per token.
     * Only the contract owner can execute this function.
     * @param _rewardRate The new reward rate to set.
     */

    function setRewardPerToken(uint256 _rewardRate) external onlyOwner updateReward(address(0)) {
        require(rewardRate > 0, "Reward rate must be greater than 0");

        rewardRate = _rewardRate;
    }

    /**
     * @dev Stake ETH to earn rewards and certificates.
     * @param _referrer The address of the referrer who referred the user (optional).
     */

    function stake(address _referrer) external payable nonReentrant updateReward(msg.sender) {
        uint256 feeCharged = ((msg.value * depositFee) / FEE_MAX);
        uint256 _amount = msg.value - feeCharged;
        require(_referrer != msg.sender && _referrer != address(0), "Cannot use same address");

        require(_amount > 0, "amount = 0");
        user[msg.sender].balance += _amount;
        if (user[msg.sender].referralAddress == address(0)) {
            user[msg.sender].referralAddress = _referrer;
        }
        feeCollected += feeCharged;
        uint256 unAmount = getRatio(_amount);
        totalUnderlyingToken += unAmount;

        user[msg.sender].underlyingBalance += unAmount;
        StakingContract.stakeAndClaimAethC{value: _amount}();
    }

    function getRatio(uint256 _amount) public view returns (uint256 ratio) {
        ratio = underlyingToken.bondsToShares(_amount);
        return ratio;
    }

    /**
     * @dev Withdraw staked certificates and claim underlying ETH.
     */
    function withdraw() external updateReward(msg.sender) nonReentrant {
        uint256 underlyingAmount = user[msg.sender].underlyingBalance;
        require(underlyingAmount >= minimumUnstake, "Invalid amount Called");

        requests[msg.sender].cooldownTime = block.timestamp + _cooldownTime;
        uint256 balance = user[msg.sender].balance;

        user[msg.sender].balance -= balance;
        user[msg.sender].underlyingBalance -= underlyingAmount;

        underlyingAmount -= 1;
        totalUnderlyingToken -= underlyingAmount;
        uint256 currentAmount = underlyingToken.sharesToBonds(underlyingAmount);
        requests[msg.sender].amount += currentAmount;
        _checkReferReward(balance, currentAmount);
        StakingContract.unstakeAETH(underlyingAmount);
    }

    /**
     * @dev Check and distribute referral rewards if the increase in underlying amount exceeds the previous amount.
     * @param _prevAmount The previous amount of underlying tokens.
     * @param _unAmount The current amount of underlying tokens.
     */

    function _checkReferReward(uint256 _prevAmount, uint256 _unAmount) private {
        if (_unAmount > _prevAmount) {
            uint256 rewA = _unAmount - _prevAmount;
            uint256 _unstakeFee = (rewA * fee) / 100;
            requests[msg.sender].fee += _unstakeFee;
            // feeCollected += _unstakeFee;
            // _payRefs(rewA);
        }
    }

    /**
     * @dev Distribute referral rewards to referrers.
     * @param _amount The total amount of rewards to be distributed.
     */
    function _payRefs(uint256 _amount) private {
        address referrer = user[msg.sender].referralAddress;
        uint256 feeTransferred;
        for (uint256 i = 0; i < 4; i++) {
            if (referrer != address(0)) {
                uint256 rew = (_amount * refRew[i]) / 100;
                rewards[referrer].available += rew;
                feeTransferred += rew;
                emit ReferRewarded(referrer, msg.sender, rew);
                referrer = user[referrer].referralAddress;
            } else {
                break;
            }
        }
        feeCollected += (_amount - feeTransferred);
    }

    /**
     * @dev Claim and transfer available referral rewards to the sender.
     */
    function claimReferRewards() external {
        uint256 rew = rewards[msg.sender].available;
        require(rew != 0, "No rewards available");
        require(address(this).balance >= rew, "Wait for rewards to be available");
        rewards[msg.sender].available = 0;
        _unsafeTransfer(msg.sender, rew, true);
        rewards[msg.sender].claimed += rew;
        emit ReferRewardsClaimed(msg.sender, rew);
    }

    /**
     * @dev Calculate the total earned rewards for an account.
     * @param _account The account address for which to calculate rewards.
     * @return The total earned rewards for the account.
     */
    function earned(address _account) public view returns (uint256) {
        uint256 balance = user[_account].underlyingBalance;
        uint256 userRewardPerTokenPaid = user[_account].userRewardPerTokenPaid;
        uint256 _rewards = user[_account].rewards;
        return (balance * (rewardPerToken() - userRewardPerTokenPaid)) / 1e18 + _rewards;
    }

    /**
     * @dev Claim and transfer accumulated rewards to the sender.
     */
    function getReward() public updateReward(msg.sender) nonReentrant {
        uint256 reward = user[msg.sender].rewards;
        require(rewardsToken.balanceOf(address(this)) > reward, "FF");
        if (reward > 0 && rewardsToken.balanceOf(address(this)) > reward) {
            user[msg.sender].rewards = 0;
            rewardsToken.transfer(msg.sender, reward);
        }
    }

    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders
    /**
     * @dev Recover ERC20 tokens from the contract, transferring them to the owner.
     * Only the owner can execute this function.
     * @param tokenAddress The address of the ERC20 token to recover.
     * @param tokenAmount The amount of ERC20 tokens to recover.
     */
    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
        require(tokenAddress != address(underlyingToken), "Cannot withdraw the staking token");
        IERC20ExtentedExtented(tokenAddress).safeTransfer(owner(), tokenAmount);
        emit Recovered(tokenAddress, tokenAmount);
    }

    function _min(uint256 x, uint256 y) private pure returns (uint256) {
        return x <= y ? x : y;
    }

    function _unsafeTransfer(address receiverAddress, uint256 amount, bool limit) internal virtual returns (bool) {
        address payable wallet = payable(receiverAddress);
        bool success;
        if (limit) {
            assembly {
                success := call(27000, wallet, amount, 0, 0, 0, 0)
            }
            require(success == true, "Send Eth reverted");

            return success;
        }
        (success,) = wallet.call{value: amount}("");
        require(success == true, "Send Eth reverted");
        return success;
    }

    /**
     * @dev Claim the requested unstaked amount after deducting the fee and transfer to the sender.
     */
    function claimUnstakeAmount() external nonReentrant {
        request_data memory userRq = requests[msg.sender];
        uint256 _amount = userRq.amount;
        uint256 _fee = userRq.fee;
        uint256 _cooldown = userRq.cooldownTime;
        require(isClaimAvailable(msg.sender), "No Claim Available Rn");
        require(_cooldown < block.timestamp, "Wait for cooldown to end");
        require(_amount > 0, "No unstaking request made");
        require((address(this).balance >= _amount));
        uint256 totalAmount = _amount - _fee;
        emit FeeAmount(_fee);
        emit UnstakeClaimed(msg.sender, _amount);
        requests[msg.sender].fee = 0;
        requests[msg.sender].amount = 0;
        _payRefs(_fee);
        _unsafeTransfer(msg.sender, totalAmount, true);
    }

    /**
     * @dev Check if a user is eligible to claim their requested unstaked amount.
     * @param _user The user's address to check.
     * @return Whether the user can claim their unstaked amount.
     */
    function isClaimAvailable(address _user) public view returns (bool) {
        if (
            address(this).balance - feeCollected >= (requests[_user].amount)
                && requests[_user].cooldownTime <= block.timestamp
        ) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Withdraw collected unstake fees to the treasury.
     * Only the contract owner can execute this function.
     */
    function withdrawFee() external onlyOwner {
        require(feeCollected > 0, "No fee collected yet!");
        uint256 _fee = feeCollected;
        feeCollected = 0;
        _unsafeTransfer(_treasuryWallet, _fee, false);
    }

    /**
     * @dev Update the treasury address.
     * Only the contract owner can execute this function.
     * @param _receiverAddress The new treasury address to set.
     */
    function setTreasuryAddress(address _receiverAddress) external onlyOwner {
        require(_receiverAddress != address(0), "Treasury address CANNOT be DEAD WALLET");

        _treasuryWallet = _receiverAddress;
    }

    function setDepositFee(uint256 _fee) external onlyOwner {
        require(_fee / 1_000 <= 30, "Invalid Fee");

        depositFee = _fee;
    }

    function setCooldownTime(uint256 _time) external onlyOwner {
        require(_time * 1 days >= minimumCooldown, "Invalid cooldown time");
        _cooldownTime = (_time * 1 days);
    }

    function getCooldownTime() public view returns (uint256) {
        return _cooldownTime;
    }

    function setMinimumUnStake(uint256 _amount) external onlyOwner {
        require(_amount > 0 && _amount <= 10 ether, "Amount should be less than 0.1");

        minimumUnstake = _amount;
    }

    /**
     * @dev Fallback function to receive incoming Ether.
     */
    receive() external payable {}
}

interface IStakingContract {
    function stakeAndClaimAethC() external payable;

    function unstakeAETH(uint256 shares) external;
}

interface ICertificateToken {
    function sharesToBonds(uint256 amount) external view returns (uint256);

    function bondsToShares(uint256 amount) external view returns (uint256);
}
